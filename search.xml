<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a> 

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>blog - Windows下hexo+github</title>
    <url>/posts/ee60a25f/</url>
    <content><![CDATA[<p>Windows环境下配置<code>hexo</code>，并发布到<code>github.io</code>。</p>
<a id="more"></a>

<h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>参考<a href="https://hexo.io/docs/" target="_blank" rel="noopener">hexo官方文档</a>,Windows下配置<code>hexo</code>，我这边命令行工具用的是自带的<code>PowerShell</code>。</p>
<ol>
<li>安装先下载安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>和<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>。在安装<code>node.js</code>时，记得勾选<code>Add to PATH</code>，否则要手动配置环境变量。安装完分别在<code>PowerShell</code>查看版本，查看是否安装成功：<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">version</span></span><br><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>npm全局安装hexo命令，如果安装失败出现权限问题，试试前面加上<code>sudo</code>（命令需要先安装），或者以管理员身份打开<code>PowerShell</code>，然后执行命令。<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></li>
<li>创建一个文件夹，用于存放hexo文件,这里以<code>D:\blog\hexo</code>为例。</li>
<li><code>hexo -v</code>检查版本，确认hexo命令是否安装成功，执行记录如下<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">PS</span> <span class="string">D:\blog\hexo&gt;</span> <span class="string">hexo</span> <span class="string">-v</span></span><br><span class="line"><span class="attr">hexo-cli:</span> <span class="number">3.1</span><span class="number">.0</span></span><br><span class="line"><span class="attr">os:</span> <span class="string">Windows_NT</span> <span class="number">10.0</span><span class="number">.18363</span> <span class="string">win32</span> <span class="string">x64</span></span><br><span class="line"><span class="attr">node:</span> <span class="number">14.2</span><span class="number">.0</span></span><br><span class="line"><span class="attr">v8:</span> <span class="number">8.1</span><span class="number">.307</span><span class="number">.31</span><span class="string">-node.33</span></span><br><span class="line"><span class="attr">uv:</span> <span class="number">1.37</span><span class="number">.0</span></span><br><span class="line"><span class="attr">zlib:</span> <span class="number">1.2</span><span class="number">.11</span></span><br><span class="line"><span class="attr">brotli:</span> <span class="number">1.0</span><span class="number">.7</span></span><br><span class="line"><span class="attr">ares:</span> <span class="number">1.16</span><span class="number">.0</span></span><br><span class="line"><span class="attr">modules:</span> <span class="number">83</span></span><br><span class="line"><span class="attr">nghttp2:</span> <span class="number">1.40</span><span class="number">.0</span></span><br><span class="line"><span class="attr">napi:</span> <span class="number">6</span></span><br><span class="line"><span class="attr">llhttp:</span> <span class="number">2.0</span><span class="number">.4</span></span><br><span class="line"><span class="attr">openssl:</span> <span class="number">1.1</span><span class="string">.1g</span></span><br><span class="line"><span class="attr">cldr:</span> <span class="number">36.1</span></span><br><span class="line"><span class="attr">icu:</span> <span class="number">66.1</span></span><br><span class="line"><span class="attr">tz:</span> <span class="string">2019c</span></span><br><span class="line"><span class="attr">unicode:</span> <span class="number">13.0</span></span><br></pre></td></tr></table></figure></li>
<li>在前面创建好的文件夹下执行<code>hexo init</code></li>
<li>测试配置是否成功，依次执行<code>hexo clean</code>,<code>hexo generate</code>,<code>hexo server</code>。然后在浏览器打开<code>http://localhost:4000</code>，成功显示网页说明配置成功。如果有遇到下面警告，参考<a href="https://zhuanlan.zhihu.com/p/136552969" target="_blank" rel="noopener">部署Hexo踩过的坑—node14.0配置hexo</a> ，应该是nodejs版本过高导致的，不过感觉不影响使用。<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">node</span><span class="title">:9968</span>) Warning: Accessing non-existent <span class="keyword">property</span><span class="title"> </span>'lineno' of module exports inside circular dependency</span><br><span class="line">(<span class="keyword">node</span><span class="title">:9968</span>) Warning: Accessing non-existent <span class="keyword">property</span><span class="title"> </span>'column' of module exports inside circular dependency</span><br><span class="line">(<span class="keyword">node</span><span class="title">:9968</span>) Warning: Accessing non-existent <span class="keyword">property</span><span class="title"> </span>'filename' of module exports inside circular dependency</span><br><span class="line">(<span class="keyword">node</span><span class="title">:9968</span>) Warning: Accessing non-existent <span class="keyword">property</span><span class="title"> </span>'lineno' of module exports inside circular dependency</span><br><span class="line">(<span class="keyword">node</span><span class="title">:9968</span>) Warning: Accessing non-existent <span class="keyword">property</span><span class="title"> </span>'column' of module exports inside circular dependency</span><br><span class="line">(<span class="keyword">node</span><span class="title">:9968</span>) Warning: Accessing non-existent <span class="keyword">property</span><span class="title"> </span>'filename' of module exports inside circular dependency</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<ol start="7">
<li>换主题以<code>next</code>主题为例,在<code>D:\blog\hexo</code>下载主题，操作记录如下：<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">PS D:\blog\hexo&gt; git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/<span class="keyword">next</span>-theme/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure>
然后在<code>D:\blog\hexo</code>下<code>_config.yml</code>文件内找到<code>theme: landscape</code>,修改为<code>theme: next</code>,将默认主题改为next。</li>
</ol>
<h3 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h3><ol>
<li><p>创建一个repo，名称为<code>yourname.github.io</code>, 其中<code>yourname</code>是你的github名称,不可以为其他名称。项目为公开项目，否则后面发布后会404。</p>
</li>
<li><p>在<code>powershell</code>下配置git用户名和邮箱，可以和github一致。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"yourname"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"yourmail"</span></span><br></pre></td></tr></table></figure></li>
<li><p>指定邮箱生成ssh秘钥，秘钥默认存放在<code>C:\Users\huangchp\.ssh</code>。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com</span></span><br></pre></td></tr></table></figure></li>
<li><p>将上面获取的ssh放到github中，操作如下：右上角头像右键-&gt;<code>Settings</code>-&gt;<code>SSH and GPG keys</code> -&gt; <code>New SSH key</code>,把刚刚ssh用的邮箱填入<code>Title</code>框内，ssh生成的<code>id_rsa.pub</code>内容填入<code>Key</code>框内，点击<code>Add ssh key</code>保存。</p>
</li>
<li><p><code>PowerShell</code>执行<code>ssh -T git@github.com</code>验证ssh配置</p>
</li>
<li><p><code>hexo</code>目录下<code>_config.yml</code>添加发布配置</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></li>
<li><p><code>hexo</code>目录下，安装发布插件<code>npm install hexo-deployer-git --save</code>，然后执行发布</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure>
<p>打开<code>YourgithubName.github.io.git</code>你的地址验证如果和本地一样打开，就成了，如果404，确定<code>_config.yml</code>有没有写错。</p>
</li>
</ol>
<p>另外我还遇到过一个地方不配置也出现了404：github项目仓库打开，标题下面一排菜单中最右边<code>Setting</code>-&gt;左边<code>Manage access</code>-&gt;<code>Who has access</code>下点击<code>manage</code>,<code>GitHub Pages</code>下<code>Theme Chooser</code>，然后选择一个主题，之前不选主题出现了404。</p>
<p>在<code>Theme Chooser</code>下方<code>Custom domain</code>可以填写自己单独的域名，如果有独立域名的话。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Windows</tag>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础 - 04.匿名内部类</title>
    <url>/posts/9cf3d23d/</url>
    <content><![CDATA[<p>匿名内部类 :是内部类的简化写法。它的本质是一个带具体实现的父类或者父接口的匿名的子类对象。 开发中，最常用到的内部类就是匿名内部类了。以接口举例，当你使用一个接口时，得做如下几步操作：</p>
<ol>
<li>定义子类</li>
<li>重写接口中的方法</li>
<li>创建子类对象</li>
<li>调用重写后的方法</li>
</ol>
<a id="more"></a>

<p>匿名内部类必须继承一个父类或者实现一个父接口。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类名或者接口名()&#123; </span><br><span class="line">    <span class="comment">// 方法重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>定义接口:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">FlyAble</span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fly</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建匿名内部类，并调用:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerDemo</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 1.等号右边:是匿名内部类，定义并创建该接口的子类对象 </span></span><br><span class="line"><span class="comment">        2.等号左边:是多态赋值,接口类型引用指向子类对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        FlyAble f = <span class="keyword">new</span> FlyAble()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> fly() &#123;   </span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"我飞了~~~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//调用 fly方法,执行重写后的方法</span></span><br><span class="line">        f.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通常在方法的形式参数是接口或者抽象类时，也可以将匿名内部类作为参数传递。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerDemo2</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         1.等号右边:定义并创建该接口的子类对象 </span></span><br><span class="line"><span class="comment">         2.等号左边:是多态,接口类型引用指向子类对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        FlyAble f = <span class="keyword">new</span> FlyAble()&#123; </span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> fly() &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"我飞了~~~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 将f传递给showFly方法中</span></span><br><span class="line">        showFly(f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showFly</span><span class="params">(FlyAble f)</span> </span>&#123; </span><br><span class="line">        f.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上两步，也可以简化为一步，代码如下:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerDemo3</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        创建匿名内部类,直接传递给showFly(FlyAble f) */</span></span><br><span class="line">        showFly( <span class="keyword">new</span> FlyAble()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> fly() &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"我飞了~~~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showFly</span><span class="params">(FlyAble f)</span> </span>&#123; </span><br><span class="line">        f.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java基础</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>java - 02.接口</title>
    <url>/posts/bff39eb3/</url>
    <content><![CDATA[<p>接口，是Java语言中一种引用类型，是方法的集合，如果说类的内部封装了成员变量、构造方法和成员方法，那么 接口的内部主要就是封装了方法，包含抽象方法(JDK 7及以前)，默认方法和静态方法(JDK 8)，私有方法 (JDK 9)。</p>
<a id="more"></a>

<p>接口的定义，它与定义类方式相似，但是使用 interface 关键字。它也会被编译成.class文件，但一定要明确它并 不是类，而是另外一种引用数据类型。</p>
<ul>
<li>接口中，无法定义成员变量，但是可以定义常量，其值不可以改变，默认使用public static final修饰。 </li>
<li>接口中，没有构造方法，不能创建对象。</li>
<li>接口中，没有静态代码块。<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">引用数据类型:数组，类，接口。</span></span><br></pre></td></tr></table></figure>
接口的使用，它不能创建对象，但是可以被实现( implements ，类似于被继承)。一个实现接口的类(可以看做 是接口的子类)，需要实现接口中所有的抽象方法，创建该类对象，就可以调用方法了，否则它必须是一个抽象 类。</li>
</ul>
<h3 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名称 </span>&#123; </span><br><span class="line">  <span class="comment">// 抽象方法</span></span><br><span class="line">  <span class="comment">// 默认方法</span></span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="含有抽象方法"><a href="#含有抽象方法" class="headerlink" title="含有抽象方法"></a>含有抽象方法</h3><p>抽象方法:使用 abstract 关键字修饰，可以省略，没有方法体。该方法供子类实现使用。 代码如下</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"> public<span class="built_in"> interface </span>InterFaceName &#123; </span><br><span class="line">     public abstract void method();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="含有默认方法和静态方法"><a href="#含有默认方法和静态方法" class="headerlink" title="含有默认方法和静态方法"></a>含有默认方法和静态方法</h3><p>默认方法:使用 <code>default</code> 修饰，不可省略，供子类调用或者子类重写。<br>静态方法:使用 <code>static</code> 修饰，供接口直接调用。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">InterFaceName</span> &#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 执行语句 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="含有私有方法和私有静态方法"><a href="#含有私有方法和私有静态方法" class="headerlink" title="含有私有方法和私有静态方法"></a>含有私有方法和私有静态方法</h3><p>私有方法:使用 private 修饰，供接口中的默认方法或者静态方法调用</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">interface</span> <span class="symbol">InterFaceName</span> &#123; </span><br><span class="line">     <span class="keyword">private</span> <span class="built_in">void</span> method() &#123;</span><br><span class="line">     <span class="comment">// 执行语句</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h3><p>类与接口的关系为实现关系，即<code>类实现接口</code>，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类 似继承，格式相仿，只是关键字不同，实现使用 <code>implements</code> 关键字。</p>
<p>非抽象子类实现接口:</p>
<ol>
<li>必须重写接口中所有抽象方法。</li>
<li>继承了接口的默认方法，即可以直接调用，也可以重写。</li>
</ol>
<p>实现格式:</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 <span class="keyword">implements</span> 接口名 </span>&#123; </span><br><span class="line">    <span class="comment">// 重写接口中抽象方法【必须】</span></span><br><span class="line">    <span class="comment">// 重写接口中默认方法【可选】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象方法的使用"><a href="#抽象方法的使用" class="headerlink" title="抽象方法的使用"></a>抽象方法的使用</h3><p>必须全部实现<br>定义接口:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">LiveAble</span> &#123; </span><br><span class="line">     <span class="comment">// 定义抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sleep</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义实现类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">LiveAble</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"吃东西"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;             </span><br><span class="line">        System.out.println(<span class="string">"晚上睡"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义测试类:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal(); </span><br><span class="line">        <span class="comment">// 调用实现后的方法 a.eat();</span></span><br><span class="line">        a.sleep();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">吃东西</span><br><span class="line">晚上睡</span><br></pre></td></tr></table></figure>
<h3 id="默认方法的使用"><a href="#默认方法的使用" class="headerlink" title="默认方法的使用"></a>默认方法的使用</h3><p>可以继承，可以重写，二选一，但是只能通过实现类的对象来调用。</p>
<h4 id="1-继承默认方法，代码如下"><a href="#1-继承默认方法，代码如下" class="headerlink" title="1. 继承默认方法，代码如下:"></a>1. 继承默认方法，代码如下:</h4><p>定义接口:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>LiveAble &#123; </span><br><span class="line">    public<span class="built_in"> default </span>void fly()&#123;</span><br><span class="line">        System.out.println(<span class="string">"天上飞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义实现类:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Animal</span> <span class="symbol">implements</span> <span class="symbol">LiveAble</span> &#123; </span><br><span class="line">    <span class="comment">// 继承，什么都不用写，直接调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义测试类:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal(); </span><br><span class="line">        <span class="comment">// 调用默认方法</span></span><br><span class="line">        a.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果: </span><br><span class="line">天上飞</span><br></pre></td></tr></table></figure>
<h4 id="2-重写默认方法，代码如下"><a href="#2-重写默认方法，代码如下" class="headerlink" title="2. 重写默认方法，代码如下:"></a>2. 重写默认方法，代码如下:</h4><p>定义接口:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>LiveAble &#123;</span><br><span class="line">    public<span class="built_in"> default </span>void fly()</span><br><span class="line">        System.out.println(<span class="string">"天上飞"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义实现类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"自由自在的飞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义测试类:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal(); </span><br><span class="line">        <span class="comment">// 调用重写方法</span></span><br><span class="line">        a.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">自由自在的飞</span><br></pre></td></tr></table></figure>

<h3 id="静态方法的使用"><a href="#静态方法的使用" class="headerlink" title="静态方法的使用"></a>静态方法的使用</h3><p>静态与.class 文件相关，只能使用接口名调用，不可以通过实现类的类名或者实现类的对象调用，代码如下: </p>
<p>定义接口:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>LiveAble &#123;</span><br><span class="line">    public static void <span class="builtin-name">run</span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"跑起来~~~"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义实现类:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Animal</span> <span class="symbol">implements</span> <span class="symbol">LiveAble</span> &#123; </span><br><span class="line">    <span class="comment">// 无法重写静态方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义测试类:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Animal.run(); </span></span><br><span class="line">        <span class="comment">// 【错误】无法继承方法,也无法调用</span></span><br><span class="line">        LiveAble.<span class="built_in">run</span>(); <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果: </span><br><span class="line">跑起来~~~</span><br></pre></td></tr></table></figure>
<h4 id="私有方法的使用"><a href="#私有方法的使用" class="headerlink" title="私有方法的使用"></a>私有方法的使用</h4><ul>
<li>私有方法:只有默认方法可以调用。 </li>
<li>私有静态方法:默认方法和静态方法可以调用。</li>
</ul>
<p>如果一个接口中有多个默认方法，并且方法中有重复的内容，那么可以抽取出来，封装到私有方法中，供默认方法<br>去调用。从设计的角度讲，私有的方法是对默认方法和静态方法的辅助。</p>
<p>定义接口:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>LiveAble &#123; </span><br><span class="line">   <span class="built_in"> default </span>void func()&#123;</span><br><span class="line">        func1();</span><br><span class="line">        func2();</span><br><span class="line">    &#125;</span><br><span class="line">    private void func1()&#123;    </span><br><span class="line">        System.out.println(<span class="string">"跑起来~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    private void func2()&#123;  </span><br><span class="line">        System.out.println(<span class="string">"跑起来~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口的多实现"><a href="#接口的多实现" class="headerlink" title="接口的多实现"></a>接口的多实现</h3><p>在继承体系中，一个类只能继承一个父类。而对于接口而言，一个类是可以实现多个接口的，这叫做接<br>口的多实现。并且，一个类能继承一个父类，同时实现多个接口。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 [<span class="keyword">extends</span> 父类名] <span class="keyword">implements</span> 接口名1,接口名2,接口名3... </span>&#123; </span><br><span class="line">    <span class="comment">// 重写接口中抽象方法【必须】</span></span><br><span class="line">    <span class="comment">// 重写接口中默认方法【不重名时可选】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>[ ]: 表示可选操作。</code></p>
<h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><p>接口中，有多个抽象方法时，实现类必须重写所有抽象方法。如果抽象方法有重名的，只需要重写一次。代码如<br>下:</p>
<p>定义多个接口:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">A</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">showA</span>(<span class="params"></span>)</span>; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title">B</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">showB</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义实现类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showA</span><span class="params">()</span> </span>&#123;     </span><br><span class="line">        System.out.println(<span class="string">"showA"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showB</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"showB"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"show"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h4><p>接口中，有多个默认方法时，实现类都可继承使用。如果默认方法有重名的，必须重写一次。代码如下:</p>
<p>定义多个接口：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">interface A &#123;</span><br><span class="line">    public<span class="built_in"> default </span>void methodA()&#123;&#125;</span><br><span class="line">    public<span class="built_in"> default </span>void method()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">interface B &#123;</span><br><span class="line">    public<span class="built_in"> default </span>void methodB()&#123;&#125; </span><br><span class="line">    public<span class="built_in"> default </span>void method()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义实现类:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">C</span> <span class="symbol">implements</span> <span class="symbol">A,<span class="symbol">B</span></span>&#123; </span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> method() &#123;    </span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>接口中，存在同名的静态方法并不会冲突，原因是只能通过各自接口名访问静态方法。</p>
<h4 id="优先级的问题"><a href="#优先级的问题" class="headerlink" title="优先级的问题"></a>优先级的问题</h4><p>当一个类，既继承一个父类，又实现若干个接口时，父类中的成员方法与接口中的默认方法重名，子类就近选择执<br>行父类的成员方法。代码如下:<br>定义接口:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">interface A &#123;</span><br><span class="line">    public<span class="built_in"> default </span>void methodA()&#123;</span><br><span class="line">        System.out.println(<span class="string">"AAAAAAAAAAAA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义父类:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"DDDDDDDDDDDD"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义子类:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">D</span> <span class="title">implements</span> <span class="title">A</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 未重写methodA方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义测试类:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        c.methodA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">DDDDDDDDDDDD</span><br></pre></td></tr></table></figure>

<h3 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h3><p>一个接口能继承另一个或者多个接口，这和类之间的继承比较相似。接口的继承使用 extends 关键字，子接口继<br>承父接口的方法。<strong>如果父接口中的默认方法有重名的，那么子接口需要重写一次</strong>。代码如下:</p>
<p>定义父接口:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">interface A &#123;</span><br><span class="line">    public<span class="built_in"> default </span>void method()&#123;</span><br><span class="line">        System.out.println(<span class="string">"AAAAAAAAAAAAAAAAAAA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface B &#123;</span><br><span class="line">    public<span class="built_in"> default </span>void method()&#123;</span><br><span class="line">        System.out.println(<span class="string">"BBBBBBBBBBBBBBBBBBB"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义子接口:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">interface D extends A,B&#123; </span><br><span class="line">    @Override</span><br><span class="line">    public<span class="built_in"> default </span>void method() &#123;   </span><br><span class="line">        System.out.println(<span class="string">"DDDDDDDDDDDDDD"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">子接口重写默认方法时，<span class="keyword">default</span>关键字可以保留。 </span><br><span class="line">子类重写默认方法时，<span class="keyword">default</span>关键字不可以保留。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java基础</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础 - 01.String常用方法</title>
    <url>/posts/bbda4b22/</url>
    <content><![CDATA[<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul>
<li><code>public String()</code> :初始化新创建的 String对象，以使其表示空字符序列。</li>
<li><code>public String(char[] value)</code> :通过当前参数中的字符数组来构造新的String。</li>
<li><code>public String(byte[] bytes)</code> :通过使用平台的默认字符集解码当前参数中的字节数组来构造新的String</li>
</ul>
<h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><ul>
<li><code>public boolean equals (Object anObject)</code> :将此字符串与指定对象进行比较。</li>
<li><code>public boolean equalsIgnoreCase (String anotherString)</code> :将此字符串与指定对象进行比较，忽略大小<br>写。</li>
</ul>
<h3 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h3><ul>
<li><code>public int length ()</code> :返回此字符串的长度。</li>
<li><code>public String concat (String str)</code> :将指定的字符串连接到该字符串的末尾。</li>
<li><code>public char charAt (int index)</code> :返回指定索引处的 char值。</li>
<li><code>public int indexOf (String str)</code> :返回指定子字符串第一次出现在该字符串内的索引。</li>
<li><code>public String substring (int beginIndex)</code> :返回一个子字符串，从beginIndex开始截取字符串到字符<br>串结尾。</li>
<li><code>public String substring (int beginIndex, int endIndex)</code> :返回一个子字符串，从beginIndex到<br>endIndex截取字符串。含beginIndex，不含endIndex。例如：<code>s.substring(0, s.length())</code></li>
</ul>
<h3 id="转换功能的方法"><a href="#转换功能的方法" class="headerlink" title="转换功能的方法"></a>转换功能的方法</h3><ul>
<li><code>public char[] toCharArray ()</code> :将此字符串转换为新的字符数组。</li>
<li><code>public byte[] getBytes ()</code> :使用平台的默认字符集将该 String编码转换为新的字节数组。</li>
<li><code>public String replace (CharSequence target, CharSequence replacement)</code> :将与target匹配的字符串使<br>用replacement字符串替换。</li>
</ul>
<h3 id="分割功能的方法"><a href="#分割功能的方法" class="headerlink" title="分割功能的方法"></a>分割功能的方法</h3><ul>
<li><code>public String[] split(String regex)</code> :将此字符串按照给定的regex(规则)拆分为字符串数组</li>
</ul>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java基础</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>blog - hexo NexT主题下配置和美化</title>
    <url>/posts/e6f9a475/</url>
    <content><![CDATA[<p>基于<code>next8.0</code>的<code>hexo</code>配置和美化。</p>
<a id="more"></a>

<h3 id="NexT主题代码高亮显示配置问题"><a href="#NexT主题代码高亮显示配置问题" class="headerlink" title="NexT主题代码高亮显示配置问题"></a>NexT主题代码高亮显示配置问题</h3><p>参考<a href="https://blog.csdn.net/u011240016/article/details/79422448" target="_blank" rel="noopener">next主题设定代码高亮格式</a></p>
<p>需要动的地方有：</p>
<ul>
<li>主题的<code>_config.yml</code>文件</li>
<li>站点的<code>_config.yml</code>文件</li>
<li>代码块的语言标注</li>
</ul>
<p>在站点的<code>_config.yml</code>中，搜索<code>hightlight</code>，将<code>auto_detect</code>改为<code>true</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure>

<p>目前我所使用的<code>NexT 8.0.0</code>版本使用<a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="noopener">tomorrow-theme</a>,支持五种高亮格式。<br>参考<a href="http://theme-next.iissnan.com/theme-settings.html#syntax-highlight-scheme" target="_blank" rel="noopener">NexT官方文档</a>,在主题的<code>_config.yml</code>中添加高亮配置，使用文档中提到的下方配置方法发现无效。</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Code Highlight theme</span></span><br><span class="line"><span class="meta"># Available value: normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="meta"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">highlight_theme: normal</span><br></pre></td></tr></table></figure>
<p>找到<code>codeblock</code>列，配置<code>light</code>后，<code>tomorrow-theme</code>样式的风格可以显示了。推测<code>dark</code>是在另一个模式（暗黑模式？）下才生效的，但是不配会报错。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">codeblock:</span></span><br><span class="line">  <span class="meta"># Code Highlight theme</span></span><br><span class="line">  <span class="meta"># See: https:<span class="comment">//github.com/highlightjs/highlight.js/tree/master/src/styles</span></span></span><br><span class="line"><span class="symbol">  theme:</span></span><br><span class="line"><span class="symbol">    light:</span> tomorrow-night-blue</span><br><span class="line"><span class="symbol">    dark:</span> tomorrow-night-eighties</span><br></pre></td></tr></table></figure>


<p>实际配置下来，代码块上不指定语言也会有颜色高亮。如果还是不会代码高亮的话，代码块上标注语言,例如：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span> <span class="string">`Python</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">code</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">`</span><span class="string">` `</span></span><br></pre></td></tr></table></figure>

<h3 id="配置字数统计等页面数据"><a href="#配置字数统计等页面数据" class="headerlink" title="配置字数统计等页面数据"></a>配置字数统计等页面数据</h3><p>安装字数统计插件 <code>npm i hexo-symbols-count-time</code><br>在<code>hexo</code>的<code>_config.yml</code>下找到<code># Extensions</code>在下面配置插件配置如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字数统计插件 npm i hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span> <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span> <span class="comment"># 文章时长统计</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span> <span class="comment"># 全局字数统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span> <span class="comment"># 全局时长统计</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span>  <span class="comment"># 排除代码字数统计</span></span><br></pre></td></tr></table></figure>

<h3 id="NexT8动画背景Canvas-Nest和three配置"><a href="#NexT8动画背景Canvas-Nest和three配置" class="headerlink" title="NexT8动画背景Canvas Nest和three配置"></a>NexT8动画背景Canvas Nest和three配置</h3><p><code>hexo</code>目录下安装动画库</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest:</span></span><br><span class="line">cd themes/<span class="keyword">next</span></span><br><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-canvas-nest source/<span class="class"><span class="keyword">lib</span>/<span class="title">canvas</span>-<span class="title">nest</span></span></span><br><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-three source/<span class="class"><span class="keyword">lib</span>/<span class="title">three</span></span></span><br></pre></td></tr></table></figure>

<p><code>next</code>主题的<code>_config.yml</code>找到<code>canvas_ribbon</code>，在下面添加<code>Canvas-nest</code>动画的配置，<code>three</code>动画配置自带了，要启用哪个就将<code>enable</code>置为<code>true</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/theme-next-three</span></span><br><span class="line"><span class="attr">three:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">three_waves:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">canvas_lines:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">canvas_sphere:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Canvas ribbon</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"0,0,255"</span> <span class="comment"># RGB values, use ',' to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># the number of lines</span></span><br></pre></td></tr></table></figure>
<p><code>canvas_nest</code>另外还需要多一些配置，参考canvas_nest的github仓库<a href="https://github.com/theme-next/theme-next-canvas-nest/blob/master/README.md" target="_blank" rel="noopener">README</a>:</p>
<ol>
<li><p>hexo目录下操作如下：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="keyword">source</span></span><br><span class="line"><span class="built_in">mkdir</span> _data</span><br></pre></td></tr></table></figure></li>
<li><p>创建<code>footer.swig</code>文件，添加内容</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="attribute">color</span>=<span class="string">"0,0,255"</span> <span class="attribute">opacity</span>=<span class="string">"0.5"</span> <span class="attribute">zIndex</span>=<span class="string">"-1"</span> <span class="attribute">count</span>=<span class="string">"99"</span> <span class="attribute">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在<code>next</code>主题下的<code>_config.yml</code>中找到<code>custom_file_path</code>添加一行配置<code>footer: source/_data/footer.swig</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Define custom file paths.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Create your custom files <span class="keyword">in</span> site directory `<span class="built_in">source</span>/_data` and uncomment needed files below.</span></span><br><span class="line">custom_file_path:</span><br><span class="line"><span class="meta">  #</span><span class="bash">head: <span class="built_in">source</span>/_data/head.njk</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">header: <span class="built_in">source</span>/_data/header.njk</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">sidebar: <span class="built_in">source</span>/_data/sidebar.njk</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">postMeta: <span class="built_in">source</span>/_data/post-meta.njk</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">postBodyEnd: <span class="built_in">source</span>/_data/post-body-end.njk</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">footer: <span class="built_in">source</span>/_data/footer.njk</span></span><br><span class="line">  footer: source/_data/footer.swig</span><br><span class="line"><span class="meta">  #</span><span class="bash">bodyEnd: <span class="built_in">source</span>/_data/body-end.njk</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">variable: <span class="built_in">source</span>/_data/variables.styl</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">mixin: <span class="built_in">source</span>/_data/mixins.styl</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">style: <span class="built_in">source</span>/_data/styles.styl</span></span><br></pre></td></tr></table></figure></li>
<li><p>重新启动<code>hexo</code>:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">s</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="文章摘要配置"><a href="#文章摘要配置" class="headerlink" title="文章摘要配置"></a>文章摘要配置</h3><p>找到三种方式添加文章摘要，显示阅读全文方式。</p>
<ol>
<li><p>在文章中使用<code>&lt;!--more--&gt;</code>手动进行截断,测试可用,但是感觉挺麻烦的。</p>
</li>
<li><p>配置自动截取。无论是在<code>hexo</code>的<code>_config.yml</code>还是在<code>next</code>主题的<code>_config.yml</code>下配置，最后都没有生效。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动形成摘要</span></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 文章截取长度</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在文章中的<code>front-matter</code>中添加<code>description</code>字段，然后在这个字段内写摘要。因为还是觉得麻烦，干脆懒得测试。暂时打算先用第一种，后面再找找看别的方案。</p>
</li>
</ol>
<h3 id="修改文内链接样式"><a href="#修改文内链接样式" class="headerlink" title="修改文内链接样式"></a>修改文内链接样式</h3><p>参考： <a href="https://www.jianshu.com/p/64caf29fdd0c" target="_blank" rel="noopener">Hexo NexT 主题美化记录</a><br>在<code>themes\next\source\css\_common\components\post\post.styl</code>文件中添加下列的代码：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">        <span class="attribute">border-bottom</span>: none;</span><br><span class="line">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h3><p>参考： <a href="https://www.jianshu.com/p/64caf29fdd0c" target="_blank" rel="noopener">Hexo NexT 主题美化记录</a><br>打开<code>themes\next\source\css\_common\components\post\post.styl</code>文件，将<code>post-block</code>代码进行如下更改：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (hexo-config(<span class="string">'motion.transition.post_block'</span>)) &#123;</span><br><span class="line">    .post-block&#123;</span><br><span class="line">        margin-top: <span class="number">60</span>px;</span><br><span class="line">        margin-bottom: <span class="number">60</span>px;</span><br><span class="line">        padding: <span class="number">25</span>px;</span><br><span class="line">        background:rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>) none repeat scroll !important; <span class="comment">//添加透明效果</span></span><br><span class="line">        -webkit-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span>);</span><br><span class="line">        -moz-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    .pagination, .comments &#123;</span><br><span class="line">      opacity: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="回到顶部按钮显示百分比"><a href="#回到顶部按钮显示百分比" class="headerlink" title="回到顶部按钮显示百分比"></a>回到顶部按钮显示百分比</h3><p><code>next</code>主题的<code>_config.yml</code>配置修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">    <span class="comment"># 回到顶部按钮</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># true，按钮显示在侧边栏；false，按钮显示在右下角</span></span><br><span class="line">    <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 按钮上显示百分比</span></span><br><span class="line">    <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="添加背景图片和透明度"><a href="#添加背景图片和透明度" class="headerlink" title="添加背景图片和透明度"></a>添加背景图片和透明度</h3><p><code>hexo</code>目录下，在<code>source/_data</code>(<code>_data</code>目录之前没手动创建过的话要手动创建)下新建<code>styles.styl</code>，内容为：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"> 	<span class="attribute">background</span>:url(/images/background.jpg);</span><br><span class="line"> 	<span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-size</span>:<span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">// 文章主体透明度</span></span><br><span class="line"><span class="selector-class">.main-inner</span>&#123;</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 放置头像等的边栏透明度</span></span><br><span class="line"><span class="selector-class">.sidebar</span>&#123;</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 标题等头部透明度</span></span><br><span class="line"><span class="selector-class">.header-inner</span>&#123;</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 底部透明度</span></span><br><span class="line"><span class="selector-class">.footer-inner</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:black;</span><br><span class="line">	<span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>background:图片路径，也可以直接使用链接</li>
<li>background-repeat：若果背景图片不能全屏，那么是否平铺显示，充满屏幕，no-repeat不平铺</li>
<li>background-attachment：背景是否随着网页上下滚动而滚动，fixed为当页面的其余部分滚动时，背景图像不会移动</li>
<li>background-position：就是调整图片的位置</li>
<li>background-size：图片展示大小，这里如果设置100% 100%，当背景图片不能全屏，通过拉伸的方式将背景强制拉伸至全屏显示。如果不添加，图片虽然不会完整显示，但不会因为拉伸变形。个人更喜欢不加这个属性。</li>
</ul>
<p>然后在<code>next</code>主题的<code>_config.yml</code>下<code>custom_file_path</code>解开<code>style: source/_data/styles.styl</code>注释。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Define custom file paths.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Create your custom files <span class="keyword">in</span> site directory `<span class="built_in">source</span>/_data` and uncomment needed files below.</span></span><br><span class="line">custom_file_path:</span><br><span class="line"><span class="meta">  #</span><span class="bash">head: <span class="built_in">source</span>/_data/head.njk</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">header: <span class="built_in">source</span>/_data/header.njk</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">sidebar: <span class="built_in">source</span>/_data/sidebar.njk</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">postMeta: <span class="built_in">source</span>/_data/post-meta.njk</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">postBodyEnd: <span class="built_in">source</span>/_data/post-body-end.njk</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">footer: <span class="built_in">source</span>/_data/footer.njk</span></span><br><span class="line">  footer: source/_data/footer.swig</span><br><span class="line"><span class="meta">  #</span><span class="bash">bodyEnd: <span class="built_in">source</span>/_data/body-end.njk</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">variable: <span class="built_in">source</span>/_data/variables.styl</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">mixin: <span class="built_in">source</span>/_data/mixins.styl</span></span><br><span class="line">  style: source/_data/styles.styl</span><br></pre></td></tr></table></figure>
<p>在后在<code>next</code>主题的<code>source/images</code>目录下添加<code>background.jpg</code>文件,重新启动<code>hexo</code>。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">s</span></span><br></pre></td></tr></table></figure>

<h3 id="添加吉祥物"><a href="#添加吉祥物" class="headerlink" title="添加吉祥物"></a>添加吉祥物</h3><p><a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">项目</a>目前有好几款模型挂件，可以去里面找自己喜欢的，也可以按照项目里给出的方式自定义模型。</p>
<p>安装</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-helper-live2d</span></span><br><span class="line">npm <span class="keyword">install</span> <span class="comment">--save live2d-widget-model-wanko</span></span><br></pre></td></tr></table></figure>
<p><code>hexo</code>的<code>_config.yml</code>添加配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 吉祥物挂件 npm install -save hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure>


<h3 id="界面语言配置"><a href="#界面语言配置" class="headerlink" title="界面语言配置"></a>界面语言配置</h3><p><code>next</code>的<code>_config.yml</code>添加:</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 界面语言</span></span><br><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-CN</span><br></pre></td></tr></table></figure>

<h3 id="menu配置"><a href="#menu配置" class="headerlink" title="menu配置"></a>menu配置</h3><p>配置菜单</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># When running the site in a subdirectory (e.g. yoursite.com/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">/schedule/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-calendar</span></span><br><span class="line">  <span class="comment"># sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment"># commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>除了<code>home</code>和<code>archives</code>外，其他都需要做额外配置。以<code>tags</code>为例，<code>hexo</code>目录下,执行<code>hexo new page tags</code>,会在<code>hexo</code>目录下的<code>source</code>生成一个<code>tags</code>目录，并在里面生成一个<code>index.md</code>文件。</p>
<p>next主题的icon使用的是<code>fontawesome</code>的，通过下面地址查找到可配置使用的<a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">icon</a></p>
<h3 id="配置网站图标"><a href="#配置网站图标" class="headerlink" title="配置网站图标"></a>配置网站图标</h3><p>图片资源存放到<code>hexo/next/images</code>下。<code>next</code>的<code>_config.yml</code>:</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">favicon:</span></span><br><span class="line"><span class="symbol">  small:</span> <span class="meta-keyword">/images/</span>owl_16x16.png</span><br><span class="line"><span class="symbol">  medium:</span> <span class="meta-keyword">/images/</span>owl_32x32.png</span><br><span class="line"><span class="symbol">  apple_touch_icon:</span> <span class="meta-keyword">/images/</span>owl_128x128.png</span><br><span class="line"><span class="symbol">  safari_pinned_tab:</span> <span class="meta-keyword">/images/</span>owl_logo.svg</span><br></pre></td></tr></table></figure>

<h3 id="配置头像"><a href="#配置头像" class="headerlink" title="配置头像"></a>配置头像</h3><p>图片资源存放到<code>hexo/next/images</code>下。<code>next</code>的<code>_config.yml</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/owl_533x533.png</span> <span class="comment">#/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="修改底部样式"><a href="#修改底部样式" class="headerlink" title="修改底部样式"></a>修改底部样式</h3><p><code>next</code>的<code>_config.yml</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2020</span></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span></span><br><span class="line">    <span class="comment"># https://fontawesome.com/v4.7.0/icons/</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-sun</span></span><br><span class="line">    <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">"#ff0000"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="配置版权声明"><a href="#配置版权声明" class="headerlink" title="配置版权声明"></a>配置版权声明</h3><p><code>next</code>的<code>_config.yml</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"><span class="comment"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line"><span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="comment"># 侧边栏</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 文章内</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 语言</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>

<h3 id="本地搜索框"><a href="#本地搜索框" class="headerlink" title="本地搜索框"></a>本地搜索框</h3><p><code>hexo</code>目录下，先安装插件<code>npm install hexo-generator-searchdb --save</code>,配置<code>hexo</code>的<code>_config.yml</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地搜索菜单 npm install hexo-generator-searchdb --save</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<h3 id="文章固定id"><a href="#文章固定id" class="headerlink" title="文章固定id"></a>文章固定id</h3><p>默认是按时间title生成文章序列，但是每次发布可能会造成变动。<code>abbrlink</code>插件能为每篇文章生成独立的唯一id。<code>hexo</code>目录下安装插件<code>npm install hexo-abbrlink --save</code>,然后配置<code>hexo</code>的<code>_config.yml</code>,这里我把插件相关都配置在<code># Extensions</code>位置下，方便查找。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Extensions</span></span><br><span class="line"><span class="meta">## Plugins: https:<span class="comment">//hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta"># abbrlink插件配置 生成固定的文章id</span></span><br><span class="line"><span class="meta"># npm install hexo-abbrlink --save</span></span><br><span class="line"><span class="symbol">abbrlink:</span></span><br><span class="line"><span class="symbol">  alg:</span> crc32  <span class="meta">#support crc16(default) and crc32</span></span><br><span class="line"><span class="symbol">  rep:</span> hex    <span class="meta">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<p><code>hexo</code>的<code>_config.yml</code>内找到<code>permalink</code>节点，修改文章链接序列生成方式。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">permalink</span>: <span class="selector-pseudo">:year</span>/<span class="selector-pseudo">:month</span>/<span class="selector-pseudo">:day</span>/<span class="selector-pseudo">:title</span>/</span><br><span class="line"># <span class="selector-tag">abbrlink</span>插件 配置文章<span class="selector-tag">id</span>，默认的是按时间标题配置的</span><br><span class="line"><span class="selector-tag">permalink</span>: <span class="selector-tag">posts</span>/<span class="selector-pseudo">:abbrlink</span>/</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Windows</tag>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础 - 03.final关键字</title>
    <url>/posts/f2b5981c/</url>
    <content><![CDATA[<p>final: 不可改变。可以用于修饰类、方法和变量。</p>
<ul>
<li>类:被修饰的类，不能被继承。 </li>
<li>方法:被修饰的方法，不能被重写。 </li>
<li>变量:被修饰的变量，不能被重新赋值。</li>
</ul>
<a id="more"></a>

<h4 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h4><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h4><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">final</span> 返回值类型 方法名(参数列表)&#123; </span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重写被 <code>final</code> 修饰的方法，编译时就会报错。</p>
<h4 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h4><p><strong>1. 局部变量——基本类型</strong></p>
<p>基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">FinalDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">// 声明变量，使用final修饰 final int a;</span></span><br><span class="line">        <span class="comment">// 第一次赋值</span></span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第二次赋值</span></span><br><span class="line">        a = <span class="number">20</span>; <span class="comment">// 报错,不可重新赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2. 局部变量——引用类型</strong></p>
<p>引用类型的局部变量，被final修饰后，只能指向一个对象，地址不能再更改。但是不影响对象内部的成员变量值的<br>修改，代码如下:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo2</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 User 对象</span></span><br><span class="line">        <span class="keyword">final</span> User u = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">// 创建 另一个 User对象</span></span><br><span class="line">        u = <span class="keyword">new</span> User(); <span class="comment">// 报错，指向了新的对象，地址值改变。</span></span><br><span class="line">        <span class="comment">// 调用setName方法</span></span><br><span class="line">        u.setName(<span class="string">"张三"</span>); <span class="comment">// 可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3. 成员变量</strong></p>
<p>成员变量涉及到初始化的问题，初始化方式有两种，只能二选一:</p>
<ul>
<li>显示初始化;<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public class<span class="built_in"> User </span>&#123;</span><br><span class="line">    final String USERNAME = <span class="string">"张三"</span>; </span><br><span class="line">    private int age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>构造方法初始化。<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> USERNAME ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">String</span> username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.USERNAME = username;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<code>被final修饰的常量名称，一般都有书写规范，所有字母都大写。</code></li>
</ul>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java基础</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础 - 06.时间类转换</title>
    <url>/posts/8e91112d/</url>
    <content><![CDATA[<ol>
<li>Timestamp转LocalDateTime（mysql中datetime数据取出时是timestamp类型）<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">LocalDateTime localDateTime = <span class="keyword">new</span> <span class="constructor">Timestamp(System.<span class="params">currentTimeMillis</span>()</span>).<span class="keyword">to</span><span class="constructor">LocalDateTime()</span>; </span><br><span class="line"><span class="comment">//或者 </span></span><br><span class="line">LocalDateTime localDateTime1 = <span class="module-access"><span class="module"><span class="identifier">LocalDateTime</span>.</span></span><span class="keyword">of</span><span class="constructor">Instant(<span class="params">new</span> Timestamp(System.<span class="params">currentTimeMillis</span>()</span>).<span class="keyword">to</span><span class="constructor">Instant()</span>,<span class="module-access"><span class="module"><span class="identifier">ZoneId</span>.</span></span>system<span class="constructor">Default()</span>);</span><br></pre></td></tr></table></figure>
注意转换之后会有字符T存在<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str = localDateTime.format(<span class="module-access"><span class="module"><span class="identifier">DateTimeFormatter</span>.</span></span><span class="keyword">of</span><span class="constructor">Pattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span>);<span class="comment">//去掉T和毫秒值</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>2.LocalDateTime转Timestamp</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">Timestamp</span> <span class="type">timestamp</span> = <span class="type">Timestamp</span>.valueOf(LocalDateTime.now());</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>Date转LocalDate</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">LocalDate localDate = <span class="module-access"><span class="module"><span class="identifier">LocalDate</span>.</span></span><span class="keyword">of</span><span class="constructor">Instant(<span class="params">new</span> Date()</span>.<span class="keyword">to</span><span class="constructor">Instant()</span>, <span class="module-access"><span class="module"><span class="identifier">ZoneId</span>.</span></span>system<span class="constructor">Default()</span>); </span><br><span class="line"><span class="comment">//或者 </span></span><br><span class="line">LocalDate localDate1 = <span class="keyword">new</span> <span class="constructor">Date()</span>.<span class="keyword">to</span><span class="constructor">Instant()</span>.at<span class="constructor">Zone(ZoneId.<span class="params">systemDefault</span>()</span>).<span class="keyword">to</span><span class="constructor">LocalDate()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>LocalDate转Date</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Date date = <span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>from(<span class="module-access"><span class="module"><span class="identifier">LocalDate</span>.</span></span>now<span class="literal">()</span>.at<span class="constructor">StartOfDay()</span>.at<span class="constructor">Zone(ZoneId.<span class="params">systemDefault</span>()</span>).<span class="keyword">to</span><span class="constructor">Instant()</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Date转LocalDateTime</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">LocalDateTime localDateTime = <span class="module-access"><span class="module"><span class="identifier">LocalDateTime</span>.</span></span><span class="keyword">of</span><span class="constructor">Instant(<span class="params">new</span> Date()</span>.<span class="keyword">to</span><span class="constructor">Instant()</span>,<span class="module-access"><span class="module"><span class="identifier">ZoneId</span>.</span></span>system<span class="constructor">Default()</span>);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">LocalDateTime localDateTime1 = <span class="keyword">new</span> <span class="constructor">Date()</span>.<span class="keyword">to</span><span class="constructor">Instant()</span>.at<span class="constructor">Zone(ZoneId.<span class="params">systemDefault</span>()</span>).<span class="keyword">to</span><span class="constructor">LocalDateTime()</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>LocalDateTime转LocalDate</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">LocalDate localDate = <span class="module-access"><span class="module"><span class="identifier">LocalDateTime</span>.</span></span>now<span class="literal">()</span>.<span class="keyword">to</span><span class="constructor">LocalDate()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>LocalDate转LocalDateTime</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">LocalDateTime localDateTime = <span class="module-access"><span class="module"><span class="identifier">LocalDate</span>.</span></span>now<span class="literal">()</span>.at<span class="constructor">StartOfDay()</span>.at<span class="constructor">Zone(ZoneId.<span class="params">systemDefault</span>()</span>).<span class="keyword">to</span><span class="constructor">LocalDateTime()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>LocalDateTime转Date</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Date date = <span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>from(<span class="module-access"><span class="module"><span class="identifier">LocalDateTime</span>.</span></span>now<span class="literal">()</span>.at<span class="constructor">Zone(ZoneId.<span class="params">systemDefault</span>()</span>).<span class="keyword">to</span><span class="constructor">Instant()</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>String转LocalDate</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">LocalDate localDate = <span class="module-access"><span class="module"><span class="identifier">LocalDate</span>.</span></span>parse(<span class="string">"2018-09-15"</span>, <span class="module-access"><span class="module"><span class="identifier">DateTimeFormatter</span>.</span></span><span class="keyword">of</span><span class="constructor">Pattern(<span class="string">"yyyy-MM-dd"</span>)</span>);</span><br></pre></td></tr></table></figure>
<p>注意String中是‘-’连接则解析方法也必须是‘-’连接，否则解析不了</p>
</li>
<li><p>String转LocalDateTime</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">LocalDateTime localDateTime1 = <span class="module-access"><span class="module"><span class="identifier">LocalDateTime</span>.</span></span>parse(<span class="string">"2019-05-20 15:33:24"</span>,<span class="module-access"><span class="module"><span class="identifier">DateTimeFormatter</span>.</span></span><span class="keyword">of</span><span class="constructor">Pattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>String转Date</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String  dateStr = <span class="keyword">new</span> <span class="constructor">SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>)</span>.format(<span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>from(<span class="module-access"><span class="module"><span class="identifier">LocalDate</span>.</span></span>now<span class="literal">()</span>.at<span class="constructor">StartOfDay()</span>.at<span class="constructor">Zone(ZoneId.<span class="params">systemDefault</span>()</span>).<span class="keyword">to</span><span class="constructor">Instant()</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>String转Timestamp</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">Timestamp</span> <span class="type">timestamp</span> = <span class="type">Timestamp</span>.valueOf("2019-5-23 13:24:45");</span><br></pre></td></tr></table></figure>
</li>
<li><p>Date转String</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span> <span class="built_in">date</span> = <span class="literal">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(<span class="string">"2018-12-12"</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>14.LocalDateTime转String</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String timeStr = <span class="module-access"><span class="module"><span class="identifier">DateTimeFormatter</span>.</span></span><span class="keyword">of</span><span class="constructor">Pattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span>.format(<span class="module-access"><span class="module"><span class="identifier">LocalDateTime</span>.</span></span>now<span class="literal">()</span>)</span><br></pre></td></tr></table></figure>

<ol start="15">
<li><p>Timestamp转String</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String timeStr1 = <span class="keyword">new</span> <span class="constructor">SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span>.format(<span class="keyword">new</span> <span class="constructor">Timestamp(System.<span class="params">currentTimeMillis</span>()</span>));  </span><br><span class="line">String timeStr2 = <span class="keyword">new</span> <span class="constructor">Timestamp(System.<span class="params">currentTimeMillis</span>()</span>).<span class="keyword">to</span><span class="constructor">String()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>取Timestamp Value</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">long timestampValue0 = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line"></span><br><span class="line">long timestampValue1 = <span class="keyword">new</span> <span class="constructor">Timestamp(System.<span class="params">currentTimeMillis</span>()</span>).get<span class="constructor">Time()</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>参考：<br><a href="https://my.oschina.net/u/4134962/blog/3051916" target="_blank" rel="noopener">Timestamp、LocalDateTime、DateTime、String、LocalDate、Date转换</a></p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java基础</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础 - 05.java注解</title>
    <url>/posts/5a25ee7e/</url>
    <content><![CDATA[<p>定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。注解通过<code>@interface</code>关键字进行定义。</p>
<a id="more"></a>

<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>元注解是可以注解到注解上的注解，或者说元注解是一种基本注解，但是它能够应用到其它的注解上面。元注解有 @Retention、@Documented、@Target、@Inherited、@Repeatable 5 种。</p>
<h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><p>说明这个注解的的存活时间，它的取值如下：</p>
<ul>
<li>RetentionPolicy.SOURCE 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。</li>
<li>RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。</li>
<li>RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们。JVM将在运行期间保留注解，因此可以通过反射机制读取注解的信息</li>
</ul>
<h4 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h4><p>将注解中的元素包含到 Javadoc 中去。</p>
<h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><p>表示该注解可以用于什么地方，可能的ElementType参数有：</p>
<ul>
<li>ElementType.ANNOTATION_TYPE 可以给一个注解进行注解</li>
<li>ElementType.CONSTRUCTOR 可以给构造方法进行注解</li>
<li>ElementType.FIELD 可以给属性进行注解</li>
<li>ElementType.LOCAL_VARIABLE 可以给局部变量进行注解</li>
<li>ElementType.METHOD 可以给方法进行注解</li>
<li>ElementType.PACKAGE 可以给一个包进行注解</li>
<li>ElementType.PARAMETER 可以给一个方法内的参数进行注解</li>
<li>ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举</li>
</ul>
<h4 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h4><p>它并不是说注解本身可以继承，而是说如果一个超类被 @Inherited 注解过的注解进行注解的话，那么如果它的子类没有被任何注解应用的话，那么这个子类就继承了超类的注解。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Inherited</span></span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="variable">@interface</span> Test &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">@Test</span></span><br><span class="line">public class A &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class B extends A &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>注解 Test 被 @Inherited 修饰，之后类 A 被 Test 注解，类 B 继承 A,类 B 也拥有 Test 这个注解</p>
<h4 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a>@Repeatable</h4><p>Repeatable 是可重复的意思。@Repeatable 是 Java 1.8 才加进来的，所以算是一个新的特性。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@interface</span> Persons &#123;</span><br><span class="line">	Person[]  value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repeatable(Persons.class)</span></span><br><span class="line"><span class="meta">@interface</span> Person&#123;</span><br><span class="line">	String role <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Person(role=<span class="meta-string">"artist"</span>)</span></span><br><span class="line"><span class="meta">@Person(role=<span class="meta-string">"coder"</span>)</span></span><br><span class="line"><span class="meta">@Person(role=<span class="meta-string">"PM"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@Repeatable 注解了 Person。而 @Repeatable 后面括号中的类相当于一个容器注解。</p>
<p>什么是容器注解呢？就是用来存放其它注解的地方。它本身也是一个注解。</p>
<h2 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a>注解的属性</h2><p>注解的属性也叫做成员变量。注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">public <span class="variable">@interface</span> TestAnnotation &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="selector-tag">int</span> <span class="selector-tag">id</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="selector-tag">String</span> <span class="selector-tag">msg</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码定义了 TestAnnotation 这个注解中拥有 id 和 msg 两个属性。在使用的时候，我们应该给它们进行赋值。</p>
<p>赋值的方式是在注解的括号内以 value=”” 形式，多个属性之前用 ，隔开。</p>
<p>在注解中定义属性时它的类型必须是 8 种基本数据类型外加 类、接口、注解及它们的数组。<br>注解中属性可以有默认值，默认值需要用 default 关键值指定。比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">msg</span><span class="params">()</span> <span class="keyword">default</span> "Hi"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Java-预置的注解"><a href="#Java-预置的注解" class="headerlink" title="Java 预置的注解"></a>Java 预置的注解</h2><p>JDK中预定义的一些注解</p>
<ul>
<li><p>@Override    ：检测被该注解标注的方法是否是继承自父类(接口)的</p>
</li>
<li><p>@Deprecated：该注解标注的内容，表示已过时</p>
</li>
<li><p>@SuppressWarnings：压制警告</p>
<ul>
<li>一般传递参数all  @SuppressWarnings(“all”)</li>
</ul>
</li>
<li><p>@SafeVarargs:参数安全类型注解。它的目的是提醒开发者不要用参数做一些不安全的操作,它的存在会阻止编译器产生 unchecked 这样的警告。它是在 Java 1.7 的版本中加入的。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">@SafeVarargs <span class="comment">// Not actually safe!</span></span><br><span class="line">	static <span class="built_in">void</span> m(List&lt;String&gt;... <span class="built_in">string</span>Lists) &#123;</span><br><span class="line">	Object[] <span class="built_in">array</span> = <span class="built_in">string</span>Lists;</span><br><span class="line">	List&lt;Integer&gt; tmpList = Arrays.asList(<span class="number">42</span>);</span><br><span class="line">	<span class="built_in">array</span>[<span class="number">0</span>] = tmpList; <span class="comment">// Semantically invalid, but compiles without warnings</span></span><br><span class="line">	String s = <span class="built_in">string</span>Lists[<span class="number">0</span>].<span class="keyword">get</span>(<span class="number">0</span>); <span class="comment">// Oh no, ClassCastException at runtime!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码中，编译阶段不会报错，但是运行时会抛出 ClassCastException 这个异常，所以它虽然告诉开发者要妥善处理，但是开发者自己还是搞砸了。</p>
</li>
</ul>
<p>Java 官方文档说，未来的版本会授权编译器对这种不安全的操作产生错误警告。</p>
<ul>
<li>@FunctionalInterface:函数式接口注解，这个是 Java 1.8 版本引入的新特性。函数式编程很火，所以 Java 8 也及时添加了这个特性。函数式接口 (Functional Interface) 就是一个具有一个方法的普通接口。比如<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line">public <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>When </span>an<span class="markdown"> object implementing interface <span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span>Runnable<span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span> is used</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>to create </span>a<span class="markdown"> thread, starting </span>the<span class="markdown"> thread causes </span>the<span class="markdown"> object's</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span><span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span>run<span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span> method to be called in that separately executing</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>thread.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>The general contract of </span>the<span class="markdown"> method <span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span>run<span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span> is that it may</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>take any action whatsoever.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@see     java.lang.Thread#run()</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    public <span class="keyword">abstract</span> <span class="keyword">void</span> run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
函数式接口标记有什么用，这个原因是函数式接口可以很容易转换为 Lambda 表达式。</li>
</ul>
<h2 id="注解与反射"><a href="#注解与反射" class="headerlink" title="注解与反射"></a>注解与反射</h2><p>首先可以通过 Class 对象的 isAnnotationPresent() 方法判断它是否应用了某个注解</p>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> isAnnotationPresent(<span class="class"><span class="keyword">Class</span>&lt;? <span class="keyword">extends</span> <span class="title">Annotation</span>&gt; <span class="title">annotationClass</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>然后通过 getAnnotation() 方法来获取 Annotation 对象。方法返回指定类型的注解。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;A <span class="keyword">extends</span> Annotation&gt; <span class="function">A <span class="title">getAnnotation</span><span class="params">(Class&lt;A&gt; annotationClass)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>或者是 getAnnotations() 方法。方法返回注解到这个元素上的所有注解。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Annotation[] <span class="title">getAnnotations</span>(<span class="params"></span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>如果获取到的 Annotation 如果不为 null，则就可以调用它们的属性方法了。比如</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TestAnnotation()</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">		</span><br><span class="line">		boolean hasAnnotation = Test<span class="class">.<span class="keyword">class</span>.<span class="title">isAnnotationPresent</span></span>(TestAnnotation<span class="class">.<span class="keyword">class</span>);</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> ( hasAnnotation ) &#123;</span><br><span class="line">			TestAnnotation testAnnotation = Test<span class="class">.<span class="keyword">class</span>.<span class="title">getAnnotation</span></span>(TestAnnotation<span class="class">.<span class="keyword">class</span>);</span></span><br><span class="line">			</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"id:"</span>+testAnnotation.id());</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"msg:"</span>+testAnnotation.msg());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>注解类</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">package com.java.api;</span><br><span class="line"></span><br><span class="line">import java.lang.<span class="keyword">annotation</span>.<span class="title">ElementType</span>;</span><br><span class="line">import java.lang.<span class="keyword">annotation</span>.<span class="title">Retention</span>;</span><br><span class="line">import java.lang.<span class="keyword">annotation</span>.<span class="title">RetentionPolicy</span>;</span><br><span class="line">import java.lang.<span class="keyword">annotation</span>.<span class="title">Target</span>;</span><br><span class="line"></span><br><span class="line">/**定义注解</span><br><span class="line"> * @Target：</span><br><span class="line"></span><br><span class="line">表示该注解可以用于什么地方，可能的ElementType参数有：</span><br><span class="line">CONSTRUCTOR：构造器的声明</span><br><span class="line">FIELD：域声明（包括<span class="class"><span class="keyword">enum</span>实例）</span></span><br><span class="line">LOCAL_VARIABLE：局部变量声明</span><br><span class="line">METHOD：方法声明</span><br><span class="line">PACKAGE：包声明</span><br><span class="line">PARAMETER：参数声明</span><br><span class="line">TYPE：类、接口（包括注解类型）或<span class="class"><span class="keyword">enum</span>声明</span></span><br><span class="line">@Retention</span><br><span class="line"></span><br><span class="line">表示需要在什么级别保存该注解信息。可选的RetentionPolicy参数包括：</span><br><span class="line">SOURCE：注解将被编译器丢弃</span><br><span class="line">CLASS：注解在<span class="class"><span class="keyword">class</span>文件中可用，但会被<span class="title">VM</span>丢弃</span></span><br><span class="line">RUNTIME：VM将在运行期间保留注解，因此可以通过反射机制读取注解的信息</span><br><span class="line"> * </span><br><span class="line"> * *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">public class UseCase&#123;</span></span><br><span class="line"><span class="regexp">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="regexp">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="regexp">public @interface UseCases&#123;</span></span><br><span class="line"><span class="regexp">    public String id();</span></span><br><span class="line"><span class="regexp">    public String description() default "no description";</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>使用注解</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.java.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.java.api.UseCase.UseCases;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用注解：</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordUtils</span> &#123;</span></span><br><span class="line">    @UseCases(id=<span class="string">"47"</span>,description=<span class="string">"Passwords must contain at least one numeric"</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validatePassword</span><span class="params">(<span class="keyword">String</span> password)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> (password.matches(<span class="string">"\\w*\\d\\w*"</span>));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @UseCases(id =<span class="string">"48"</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">encryptPassword</span><span class="params">(<span class="keyword">String</span> password)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(password).reverse().toString();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解析注解</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package com.java.api;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="keyword">Method</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.java.api.UseCase.UseCases;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *解析注解：</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserCaseTest &#123;</span><br><span class="line"><span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">     List&lt;<span class="type">Integer</span>&gt; useCases = <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">     Collections.addAll(useCases, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>);</span><br><span class="line">     trackUseCases(useCases, PasswordUtils.<span class="keyword">class</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">public</span> static <span class="type">void</span> trackUseCases(List&lt;<span class="type">Integer</span>&gt; useCases, <span class="keyword">Class</span>&lt;?&gt; cl) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">Method</span> m : cl.getDeclaredMethods()) &#123;</span><br><span class="line">        //获得注解的对象</span><br><span class="line">        UseCases uc = m.getAnnotation(UseCases.<span class="keyword">class</span>);</span><br><span class="line">        <span class="keyword">if</span> (uc != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("Found Use Case:" + uc.id() + " "</span><br><span class="line">                        + uc.description());</span><br><span class="line">            useCases.remove(<span class="built_in">new</span> <span class="type">Integer</span>(uc.id()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : useCases) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("Warning: Missing use case-" + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>java注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。<br>注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。包含在 java.lang.annotation 包中</p>
<p>java自定义注解和运行时靠反射获取注解。</p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/briblue/article/details/73824058" target="_blank" rel="noopener">秒懂，Java注解</a></p>
<p><a href="https://www.cnblogs.com/huojg-21442/p/7239846.html" target="_blank" rel="noopener">Java注解的自定义和使用</a></p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java基础</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>tools - chocolatey</title>
    <url>/posts/af013f3b/</url>
    <content><![CDATA[<p>Windows 基础开发环境包管理工具<code>chocolatey</code>。</p>
<a id="more"></a>

<h4 id="安装chocolatey"><a href="#安装chocolatey" class="headerlink" title="安装chocolatey"></a>安装chocolatey</h4><p>以管理员权限运行cmd.exe或powershell.exe</p>
<p>cmd运行：</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">@"%SystemRoot%\System32\WindowsPowerShell\v1<span class="number">.0</span>\powershell.exe<span class="string">" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "</span>iex ((New-Object System.Net.WebClient).DownloadString(<span class="string">'https://chocolatey.org/install.ps1'</span>))<span class="string">" &amp;&amp; SET "</span>PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin<span class="string">"</span></span><br></pre></td></tr></table></figure>
<p>powershell运行：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).<span class="constructor">DownloadString('<span class="params">https</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">chocolatey</span>.<span class="params">org</span><span class="operator">/</span><span class="params">install</span>.<span class="params">ps1</span>')</span>)</span><br></pre></td></tr></table></figure>
<p>安装完成，运行choco 或 choco -?检查一下是否安装正确</p>
<p>chocolatey安装位置：<code>C:\ProgramData\Chocolatey</code>。无法配置包安装位置。<br>参考文章<a href="https://blog.csdn.net/u013205877/article/details/78993311" target="_blank" rel="noopener">Windows 神器 Cmder Scoop Chocolatey Listary Seer</a>，可安装的应用程序默认安装在 <code>C:\Program Files\</code>，实际待考究。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">search - 搜索包 choco search something</span><br><span class="line">list - 列出包 choco list -lo 或者 choco list --local-only</span><br><span class="line">install - 安装 choco install baretail</span><br><span class="line">pin - 固定包的版本，防止包被升级 choco pin windirstat</span><br><span class="line">upgrade - 安装包的升级 choco<span class="built_in"> upgrade </span>baretail</span><br><span class="line">uninstall - 安装包的卸载 choco uninstall baretail</span><br><span class="line">安装Ruby Gem - choco install compass -source ruby</span><br><span class="line">安装Python Egg - choco install sphynx -source python</span><br><span class="line">安装IIS服务器特性 - choco install IIS -source windowsfeatures</span><br><span class="line">安装Webpi特性 - choco install IIS7.5Express -source webpi</span><br><span class="line"></span><br><span class="line">列出Windows系统已安装的软件 - choco list -li 或者 choco list -lai</span><br><span class="line">升级所有已安装的包 - choco<span class="built_in"> upgrade </span>all -y</span><br></pre></td></tr></table></figure>

<p>window 下开发常用的开发环境应用</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">choco <span class="keyword">install </span>autohotkey.portable    <span class="comment">#安装 AutoHotkey (Portable)</span></span><br><span class="line">choco <span class="keyword">install </span>nodejs.<span class="keyword">install </span> <span class="comment">#安装 node</span></span><br><span class="line">choco <span class="keyword">install </span>git.<span class="keyword">install </span>    <span class="comment">#安装 git</span></span><br><span class="line">choco <span class="keyword">install </span>ruby            <span class="comment">#安装 ruby</span></span><br><span class="line">choco <span class="keyword">install </span>python          <span class="comment">#安装 python</span></span><br><span class="line">choco <span class="keyword">install </span><span class="keyword">jdk8 </span>           <span class="comment">#安装 JDK8</span></span><br><span class="line">choco <span class="keyword">install </span>googlechrome    <span class="comment">#安装 Chrome</span></span><br><span class="line">choco <span class="keyword">install </span>google-chrome-x64 <span class="comment">#Google Chrome (64-bit only)</span></span><br><span class="line">choco <span class="keyword">install </span>firefox         <span class="comment">#安装 firefox</span></span><br><span class="line">choco <span class="keyword">install </span>notepadplusplus.<span class="keyword">install </span><span class="comment">#安装 notepad++</span></span><br><span class="line">choco <span class="keyword">install </span>Atom                    <span class="comment">#安装 Atom</span></span><br><span class="line">choco <span class="keyword">install </span><span class="keyword">SublimeText3 </span>           <span class="comment">#安装 SublimeText3</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>tools - scoop</title>
    <url>/posts/d89cad7e/</url>
    <content><![CDATA[<p>Windows 基础开发环境包管理工具<code>scoop</code>。</p>
<a id="more"></a>

<p>参考：<a href="https://blog.csdn.net/fcymk2/article/details/86653207" target="_blank" rel="noopener">用scoop代替chocolatey做Windows包管理器</a></p>
<p>软件包管理工具<code>scoop</code>，类似<code>chocolatey</code>,<code>chocolatey</code>很多软件安装位置不固定, 会污染<code>Path</code>，推荐能用<code>scoop</code>安装。<code>scoop</code>会统一安装到一个路径下。<code>chocolatey</code>权限要求高, <code>scoop</code> 使用<code>-g</code>安装才需要管理员权限, 默认普通用户权限.</p>
<h3 id="scoop-安装"><a href="#scoop-安装" class="headerlink" title="scoop 安装"></a>scoop 安装</h3><p>设置<code>powershell</code></p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set-executionpolicy</span> <span class="string">remotesigned </span>-s <span class="string">currentuser</span></span><br></pre></td></tr></table></figure>
<p>默认安装(安装到<code>C:\Users\&lt;user&gt;\scoop)</code>, 在<code>powershell</code>里面运行:</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">iex (<span class="keyword">new</span>-<span class="keyword">object</span> net.webclient).downloadstring(<span class="string">'https://get.scoop.sh'</span>)</span><br></pre></td></tr></table></figure>
<p>安装到指定目录(D:\tool\scoop)</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[environment]::setEnvironmentVariable(<span class="string">'SCOOP'</span>,<span class="string">'D:\tool\scoop'</span>,<span class="string">'User'</span>)</span><br><span class="line"><span class="variable">$env</span><span class="symbol">:SCOOP=<span class="string">'D:\tool\scoop'</span></span></span><br><span class="line">iex (new-object net.webclient).downloadstring(<span class="string">'https://get.scoop.sh'</span>)</span><br></pre></td></tr></table></figure>

<p>指定<code>-g</code>安装目录(<code>D:\tool\scoop_global</code>)</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[environment]::setEnvironmentVariable(<span class="string">'SCOOP_GLOBAL'</span>,<span class="string">'D:\tool\scoop_global'</span>,<span class="string">'Machine'</span>)</span><br><span class="line"><span class="variable">$env</span><span class="symbol">:SCOOP_GLOBAL=<span class="string">'D:\tool\scoop_global'</span></span></span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">scoop </span>help            <span class="comment">#帮助</span></span><br><span class="line"><span class="keyword">scoop </span>list            <span class="comment">#查看当前已安装软件</span></span><br><span class="line"><span class="keyword">scoop </span>info app        <span class="comment">#查看软件信息</span></span><br><span class="line"><span class="keyword">scoop </span><span class="keyword">install </span>app     <span class="comment">#安装软件</span></span><br><span class="line"><span class="keyword">scoop </span>search app      <span class="comment">#搜索软件</span></span><br><span class="line"><span class="keyword">scoop </span>uninstall app   <span class="comment">#卸载软件</span></span><br><span class="line"><span class="keyword">scoop </span>update app      <span class="comment">#更新指定软件</span></span><br><span class="line"><span class="keyword">scoop </span>update *        <span class="comment">#更新安装的软件和scoop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置代理(http)</span></span><br><span class="line"><span class="keyword">scoop </span><span class="built_in">config</span> proxy <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">4412</span></span><br></pre></td></tr></table></figure>

<h4 id="shims-目录"><a href="#shims-目录" class="headerlink" title="shims 目录"></a>shims 目录</h4><p><code>scoop</code>安装程序后会在<code>scoop</code>安装目录下的<code>shims</code>里生成一个对应程序的<code>shim.exe</code>(不知道为啥不用快捷方式).</p>
<p>安装<code>scoop</code>后 会自动把<code>shims</code>目录加到用户的Path里.</p>
<h4 id="persist-目录"><a href="#persist-目录" class="headerlink" title="persist 目录"></a>persist 目录</h4><p>这个目录下面放的是已安装软件的配置文件, 后续更新软件的时候这部分内容不会修改.</p>
<p>scoop 添加 extras 源 (默认的软件有点少)</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">scoop </span><span class="keyword">bucket </span><span class="keyword">add </span><span class="keyword">extras</span></span><br></pre></td></tr></table></figure>
<p>一个源：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">scoop bucket <span class="built_in">add</span> extras http<span class="variable">s:</span>//github.<span class="keyword">com</span>/lukesampson/scoop-extras.git</span><br></pre></td></tr></table></figure>

<h4 id="scoop-使用问题"><a href="#scoop-使用问题" class="headerlink" title="scoop 使用问题"></a>scoop 使用问题</h4><p>安装某些 <code>gui</code> 程序后, 运行对应的 <code>shim.exe</code> 会出现 <code>cmd</code> 窗口 (<code>nvim-qt</code> <code>cmd</code>窗口一直显示, <code>cmder</code> <code>cmd</code>窗口一闪而过 )</p>
<p>解决办法: 把<code>Scoop Apps</code>目录加到<code>path</code>里, 目录在<code>C:\Users\fcying\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Scoop Apps</code></p>
<p>参考：<a href="https://www.jianshu.com/p/bb0ba62b519c" target="_blank" rel="noopener">Windows下的包管理工具scoop</a><br>常用软件git,curl,7zip安装；有些需要管理员权限的软件就需要先安装sudo，就是Linux中的那个sudo；</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">scoop </span><span class="keyword">install </span>sudo</span><br><span class="line"><span class="keyword">scoop </span><span class="keyword">install </span>git curl <span class="number">7</span>zip</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>tools - PicGo+github图床</title>
    <url>/posts/1a8bafa/</url>
    <content><![CDATA[<p>Windows环境下配置以<code>github</code>为图床仓库的<code>PicGo</code>图床工具。</p>
<a id="more"></a>

<p>平时写<code>markdown</code>的时候，一般用<a href="https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf" target="_blank" rel="noopener">新浪微博图床</a>,但是怕万一以后图片挂掉用不了了，所以还是打算换个更稳定可靠的方式。<code>github</code>单仓库没有明确限制大小，但是推荐1G内，超过1G时会邮件提醒,参考<a href="https://docs.github.com/cn/github/managing-large-files/what-is-my-disk-quota#file-and-repository-size-limitations" target="_blank" rel="noopener">官方文档说明</a>。<br><img src="https://cdn.jsdelivr.net/gh/hxhowl/mdImages/img/picgo20200705020729-1.png" alt="image"></p>
<h3 id="PicGo安装"><a href="#PicGo安装" class="headerlink" title="PicGo安装"></a>PicGo安装</h3><p><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo仓库</a>查看安装和使用方法。我这里是选择在Windows上配置的，<br>打开<code>powershell</code>或者别的终端，用<code>scoop</code>安装<code>picGo</code></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">scoop</span> <span class="keyword">bucket </span><span class="keyword">add </span>helbing https://github.com/helbing/scoop-<span class="keyword">bucket</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">scoop </span>install picgo</span><br></pre></td></tr></table></figure>

<h3 id="github仓库配置"><a href="#github仓库配置" class="headerlink" title="github仓库配置"></a>github仓库配置</h3><p>创建一个public的仓库，然后配置一个<code>token</code>，打开<code>settings</code>，<br><img src="https://cdn.jsdelivr.net/gh/hxhowl/mdImages/img/picgo20200703001157.png" alt="image"><br><code>Personal access tokens</code>下点击<code>Generate new token</code>,<br><img src="https://cdn.jsdelivr.net/gh/hxhowl/mdImages/img/picgo20200703000340.png" alt="image"><br>填<code>note</code>（备注信息），<code>repo</code>打钩。<br><img src="https://cdn.jsdelivr.net/gh/hxhowl/mdImages/img/picgo20200703000437.png" alt="image"><br>点击最底下<code>Generate Token</code>按钮生成一份<code>token</code>，可以看到提示<code>Make sure to copy your new personal access token now. You won’t be able to see it again!</code>，所以复制并保存到起来。</p>
<h3 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h3><p><img src="https://cdn.jsdelivr.net/gh/hxhowl/mdImages/img/PicGo20200703002510.png" alt="image"></p>
<ul>
<li><code>设定的仓库名</code>：<code>github用户名/仓库名</code></li>
<li><code>分支名</code>: 仓库所属分支，仓库默认分支是<code>master</code>，所以这里一般也是填<code>master</code></li>
<li><code>设定Token</code>: 将前面创建的token复制进来，如果后面忘记了，重新创建再复制进来就可以了。</li>
<li><code>指定存储路径</code>: 指定图片在仓库的路径。留空就是根目录。为了管理方便，建议按自己喜欢的规则创建文件夹会比较有条理一些。</li>
<li><code>设定自定义域名</code>：配置自定义域名的图片。<ul>
<li>不配的话，图片url格式为<code>https://raw.githubusercontent.com/github用户名/仓库名/分支名/指定存储路径/图片名.png)</code>。</li>
<li>可以使用<a href="https://www.jsdelivr.com/" target="_blank" rel="noopener"><code>https://www.jsdelivr.com/</code></a>提供的免费cdn配置加速。格式为<code>https://cdn.jsdelivr.net/gh/github用户名/仓库名</code>,生成的图片url格式为<code>https://cdn.jsdelivr.net/gh/github用户名/仓库名/指定存储路径/图片名.png</code></li>
</ul>
</li>
</ul>
<h3 id="其他说明和采坑"><a href="#其他说明和采坑" class="headerlink" title="其他说明和采坑"></a>其他说明和采坑</h3><p>相册是本地的一个上传信息缓存，测试发现，只是提供之前图片上传记录用的，删除不会作用到仓库，只是删除这里的一条记录。<br><img src="https://cdn.jsdelivr.net/gh/hxhowl/mdImages/img/picgo20200703004634.png" alt="image"></p>
<p>出现<code>上传失败</code>错误时，先确认仓库名等信息是否填写准确，再确定选取的本地图片的路径是否包含空格和<code>+</code>等特殊符号。目前发现路径空格和<code>+</code>时会<code>上传失败</code>。<br><img src="https://cdn.jsdelivr.net/gh/hxhowl/mdImages/img/picgo20200703003749.png" alt="image"></p>
<p>比如我这里一开始把图片存放在c盘<code>图片</code>下的<code>保存的图片</code>下，<code>保存的图片</code>实际路径信息是<code>Saved Pictures</code>，带了空格，然后就上传失败。<br><img src="https://cdn.jsdelivr.net/gh/hxhowl/mdImages/img/picgo20200703004241.png" alt="image"></p>
<p>有时候<code>上传失败</code>是软件出问题了，可能需要<code>PicGo设置</code>-&gt;<code>设置Server</code>界面重新打开Server：点<code>关闭</code>、<code>确定</code>,再点击<code>开启</code>、<code>确定</code>。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>tools</tag>
        <tag>图床</tag>
      </tags>
  </entry>
</search>
